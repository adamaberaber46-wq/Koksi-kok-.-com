/**
 * @fileoverview Firestore Security Rules for the Style Store application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (profiles, shopping carts, orders, AI suggestions).
 * Top-level collections (categories, products) are publicly readable, but writes are not allowed in this prototype.
 *
 * Data Structure:
 * - /categories/{categoryId}: Stores product categories. Publicly readable.
 * - /products/{productId}: Stores product information. Publicly readable.
 * - /users/{userId}: Stores user profile data. Document ID is the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Stores shopping cart items for a user.
 * - /users/{userId}/orders/{orderId}: Stores orders placed by a user.
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Stores items within a specific order.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: Stores AI outfit suggestions for a user.
 *
 * Key Security Decisions:
 * - User listing is disallowed (to protect privacy).
 * - Top-level collections are publicly readable for prototyping but writes are not allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to category documents. Writes are not allowed.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @deny (create, update, delete): No user can create, update, or delete categories in this prototype.
     * @principle Allows public read access for product categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product documents. Writes are not allowed.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): No user can create, update, or delete products in this prototype.
     * @principle Allows public read access for products.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profile data, restricting access to the owning user.
     * @path /users/{userId}
     * @allow (get): Allows the owning user to read their profile data.
     * @allow (create): Allows a user to create their own profile if the user ID matches the authenticated user ID.
     * @allow (update): Allows the owning user to update their profile data if the user ID matches the authenticated user ID.
     * @allow (delete): Allows the owning user to delete their profile data if the user ID matches the authenticated user ID.
     * @allow (list): Listing all users is disallowed.
     * @deny (create): Denies creation if the user ID does not match the authenticated user ID.
     * @deny (update): Denies update if the user ID does not match the authenticated user ID or if the document does not exist.
     * @deny (delete): Denies deletion if the user ID does not match the authenticated user ID or if the document does not exist.
     * @principle Enforces user-ownership for profile data and restricts user listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;

    }

    /**
     * @description Manages shopping cart items for a specific user.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list): Allows the owning user to read their shopping cart items.
     * @allow (create): Allows the owning user to add items to their shopping cart.
     * @allow (update): Allows the owning user to update items in their shopping cart if the document exists.
     * @allow (delete): Allows the owning user to delete items from their shopping cart if the document exists.
     * @deny (create): Denies creation if the user ID does not match the authenticated user ID.
     * @deny (update): Denies update if the user ID does not match the authenticated user ID or if the document does not exist.
     * @deny (delete): Denies deletion if the user ID does not match the authenticated user ID or if the document does not exist.
     * @principle Enforces user-ownership for shopping cart data.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages orders for a specific user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list): Allows the owning user to read their orders.
     * @allow (create): Allows the owning user to create orders.
     * @allow (update): Allows the owning user to update their orders if the document exists.
     * @allow (delete): Allows the owning user to delete their orders if the document exists.
     * @deny (create): Denies creation if the user ID does not match the authenticated user ID.
     * @deny (update): Denies update if the user ID does not match the authenticated user ID or if the document does not exist.
     * @deny (delete): Denies deletion if the user ID does not match the authenticated user ID or if the document does not exist.
     * @principle Enforces user-ownership for order data.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages order items within a specific order for a specific user.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (get, list): Allows the owning user to read their order items.
     * @allow (create): Allows the owning user to create order items.
     * @allow (update): Allows the owning user to update their order items if the document exists.
     * @allow (delete): Allows the owning user to delete their order items if the document exists.
     * @deny (create): Denies creation if the user ID does not match the authenticated user ID.
     * @deny (update): Denies update if the user ID does not match the authenticated user ID or if the document does not exist.
     * @deny (delete): Denies deletion if the user ID does not match the authenticated user ID or if the document does not exist.
     * @principle Enforces user-ownership for order item data.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages AI outfit suggestions for a specific user.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list): Allows the owning user to read their AI outfit suggestions.
     * @allow (create): Allows the owning user to create AI outfit suggestions.
     * @allow (update): Allows the owning user to update their AI outfit suggestions if the document exists.
     * @allow (delete): Allows the owning user to delete their AI outfit suggestions if the document exists.
     * @deny (create): Denies creation if the user ID does not match the authenticated user ID.
     * @deny (update): Denies update if the user ID does not match the authenticated user ID or if the document does not exist.
     * @deny (delete): Denies deletion if the user ID does not match the authenticated user ID or if the document does not exist.
     * @principle Enforces user-ownership for AI outfit suggestion data.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}