/**
 * @fileoverview Firestore Security Rules for the Style Store application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data,
 * while allowing public read access to products and categories.
 * Administrative roles are used to control access to sensitive data like user roles.
 *
 * Data Structure:
 * - Products and categories are stored in top-level collections with public read access.
 * - User-specific data (profiles, shopping carts, AI outfit suggestions)
 *   is nested under the /users/{userId} document, where {userId} matches
 *   the Firebase Auth UID.
 * - Orders are stored in a top-level collection but require authentication for access.
 * - User roles are stored in the `/roles/{userId}` collection, accessible only to admins.
 * - Site settings are stored in the `/site_settings/{settingId}` collection, accessible only to admins.
 *
 * Key Security Decisions:
 * - Listing of users is explicitly denied to prevent unauthorized data access.
 * - Write access to user profiles is restricted to the owning user.
 * - Orders can be created by authenticated users.
 * - Administrative access is granted based on the 'admin' role stored in the `/roles/{userId}` document.
 *
 * Denormalization for Authorization:
 * - User roles are stored in a separate `/roles/{userId}` document to simplify admin role checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document (for updates/deletes).
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership and existence for updates/deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces administrative access based on roles.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }

    /**
     * @description Rules for the categories collection.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @allow (create, update, delete): Only admins can modify category information.
     * @deny (create) if the user is not an admin.
     * @principle Public read, admin-only write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the products collection.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @allow (create, update, delete): Only admins can modify product information.
     * @deny (create) if the user is not an admin.
     * @principle Public read, admin-only write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the users collection.
     * @path /users/{userId}
     * @allow (get): Any user can read their own profile.
     * @allow (create): A user can create their own profile if the userId matches their auth UID.
     * @allow (update, delete): A user can update or delete their own profile.
     * @deny (list): Listing users is not allowed.
     * @deny (create) if the userId does not match the auth UID.
     * @deny (update, delete) if the user is not the owner of the profile.
     * @principle Owner-only access to user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);

      /**
       * @description Rules for the shopping_cart_items subcollection.
       * @path /users/{userId}/shopping_cart_items/{cartItemId}
       * @allow (get, list): The owner can read their own shopping cart items.
       * @allow (create, update, delete): The owner can modify their own shopping cart items.
       * @deny (create, update, delete) if the user is not the owner of the shopping cart items.
       * @principle Owner-only access to shopping cart items.
       */
      match /shopping_cart_items/{cartItemId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Rules for the ai_outfit_suggestions subcollection.
       * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
       * @allow (get, list): The owner can read their own AI outfit suggestions.
       * @allow (create, update, delete): The owner can modify their own AI outfit suggestions.
       * @deny (create, update, delete) if the user is not the owner of the AI outfit suggestions.
       * @principle Owner-only access to AI outfit suggestions.
       */
      match /ai_outfit_suggestions/{suggestionId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);
      }
    }

    /**
     * @description Rules for the orders collection.
     * @path /orders/{orderId}
     * @allow (get): Authenticated users can read their own orders.
     * @allow (create): Authenticated users can create orders.
     * @allow (list): Authenticated users can list orders.
     * @allow (update, delete): Only admins can modify or delete orders.
     * @deny (create) if the user is not authenticated.
     * @deny (update, delete) if the user is not an admin.
     * @principle Authenticated access to orders, admin-only modification.
     */
    match /orders/{orderId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the site_settings collection.
     * @path /site_settings/{settingId}
     * @allow (get, list): Any user can read site settings.
     * @allow (create, update, delete): Only admins can modify site settings.
     * @deny (create) if the user is not an admin.
     * @principle Admin-only access to site settings.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the roles collection.
     * @path /roles/{userId}
     * @allow (get): Only admins can read user roles.
     * @allow (create, update): Only admins can create or update user roles.
     * @deny (list, delete): Listing and deleting user roles is not allowed.
     * @deny (create, update) if the user is not an admin.
     * @principle Admin-only access to user roles.
     */
    match /roles/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }
  }
}