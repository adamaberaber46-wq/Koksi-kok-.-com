/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data (profiles, shopping carts, orders, AI outfit suggestions) and allows public read access to product catalogs (categories and products).
 * @dataStructure
 *   - /categories/{categoryId}: Stores product categories. Publicly readable.
 *   - /products/{productId}: Stores product information. Publicly readable.
 *   - /users/{userId}: Stores user profile data. Document ID is the Firebase Auth UID. Owner-only access.
 *   - /users/{userId}/shopping_cart_items/{cartItemId}: Stores shopping cart items for a user. Owner-only access.
 *   - /users/{userId}/orders/{orderId}: Stores orders placed by a user. Owner-only access.
 *   - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Stores items within a specific order. Owner-only access.
 *   - /users/{userId}/ai_outfit_suggestions/{suggestionId}: Stores AI outfit suggestions for a user. Owner-only access.
 * @keySecurityDecisions
 *   - Categories and Products are publicly readable to allow for open browsing of the catalog.
 *   - User profiles and all subcollections under /users/{userId} are strictly controlled by the user's authentication ID.
 *   - User listing is disallowed.
 * @denormalizationForAuthorization
 *   - User-specific data (shopping carts, orders, AI outfit suggestions) is stored under the `/users/{userId}` path. This allows security rules to directly check the `request.auth.uid` against the `userId` path parameter, without needing to read parent documents.
 * @structuralSegregation
 *   - Public product data is stored in top-level collections (/categories, /products), while private user data is stored under the /users/{userId} tree.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read categories, but restricts creation, updates, and deletion.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for product catalog.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read products, but restricts creation, updates, and deletion.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for product catalog.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to create their own profile, and only allows the owner to read, update, or delete their profile.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) Owner can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) Non-owner cannot read, update, or delete the profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the owner to manage their shopping cart items.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (create, get, list, update, delete) Owner can manage their cart items.
     * @deny (create, get, list, update, delete) Non-owner cannot manage the cart items.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the owner to manage their orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, list, update, delete) Owner can manage their orders.
     * @deny (create, get, list, update, delete) Non-owner cannot manage the orders.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the owner to manage order items within their orders.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create, get, list, update, delete) Owner can manage order items.
     * @deny (create, get, list, update, delete) Non-owner cannot manage order items.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.orderId == orderId;
      allow update: if isExistingOwner(userId) && request.resource.data.orderId == orderId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the owner to manage their AI outfit suggestions.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (create, get, list, update, delete) Owner can manage their outfit suggestions.
     * @deny (create, get, list, update, delete) Non-owner cannot manage the outfit suggestions.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return true if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the userId.
     * @param userId The user ID to compare against the request's authentication UID.
     * @return true if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param userId The user ID to compare against the request's authentication UID.
     * @return true if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}