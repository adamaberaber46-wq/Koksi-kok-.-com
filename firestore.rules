/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data while allowing public read access to product catalogs.
 *
 * Data Structure:
 * - /categories/{categoryId}: Public collection of product categories.
 * - /products/{productId}: Public collection of product information.
 * - /users/{userId}: Collection of user profiles, where each document ID is the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Subcollection of shopping cart items for a specific user.
 * - /users/{userId}/orders/{orderId}: Subcollection of orders placed by a specific user.
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Subcollection of order items within a specific order.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: Subcollection of AI outfit suggestions for a specific user.
 * - /site_settings/{settingId}: Collection for global site settings (e.g., homepage hero section).
 *
 * Key Security Decisions:
 * - User profiles and associated data (shopping carts, orders, AI outfit suggestions) are strictly controlled by the owning user. Only the authenticated user can access their own data.
 * - Listing of user profiles is explicitly denied to prevent unauthorized enumeration.
 * - Categories and Products are publicly readable. Writes are not secured in this prototype, see TODO comments for details.
 * - Site settings are not secured in this prototype, see TODO comments for details.
 *
 * Denormalization for Authorization:
 * - User-specific data is stored under the /users/{userId} path to allow security rules to directly check the request.auth.uid against the userId path parameter.
 *
 * Structural Segregation:
 * - User-specific data is stored under user-specific paths to ensure that listing operations are secure and efficient.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read categories, but restricts writes.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (currently not enforced).
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read products, but restricts writes.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (currently not enforced).
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages user profile data. Only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if false;
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny get: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages shopping cart items for a user. Only the authenticated user can access their own cart items.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow get, list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == userId;
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @principle Enforces document ownership and validates userId on create.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages orders placed by a user. Only the authenticated user can access their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow get, list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == userId;
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @principle Enforces document ownership and validates userId on create.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages order items within a specific order. Only the authenticated user can access their own order items.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow get, list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == userId;
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @principle Enforces document ownership and validates userId on create.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages AI outfit suggestions for a user. Only the authenticated user can access their own suggestions.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow get, list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == userId;
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @principle Enforces document ownership and validates userId on create.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages global site settings.
     * @path /site_settings/{settingId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Secure with admin role
     * @principle Public read, restricted writes.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure with admin role
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}