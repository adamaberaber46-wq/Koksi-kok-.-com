/**
 * @fileoverview Firestore Security Rules for the Style Store application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (shopping carts, orders, AI suggestions)
 * and public read access for product and category information. It prioritizes authorization independence by
 * structuring user-specific data under the `/users/{userId}` path and using denormalization where appropriate.
 *
 * Data Structure:
 * - /categories/{categoryId}: Stores product categories; publicly readable.
 * - /products/{productId}: Stores product information; publicly readable.
 * - /users/{userId}: Stores user profile data; only accessible by the user. Document ID is the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Stores shopping cart items; only accessible by the user.
 * - /users/{userId}/orders/{orderId}: Stores order history; only accessible by the user.
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Stores items within a specific order; only accessible by the user.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: Stores AI outfit suggestions; only accessible by the user.
 *
 * Key Security Decisions:
 * - Products and categories are publicly readable but only writeable by authorized users (not implemented in this version).
 * - User listing is explicitly disallowed.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *  N/A - The current structure leverages path-based authorization, so denormalization is not required in this version.
 *
 * Structural Segregation:
 *  User-specific data (shopping carts, orders, AI outfit suggestions) is stored under the `/users/{userId}` path.
 *  This allows security rules to directly check the `request.auth.uid` against the `userId` path parameter,
 *  without needing to read parent documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /categories collection.
     * @path /databases/{database}/documents/categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @allow (create, update, delete): Only authorized users can modify category data.
     * @deny (create, update, delete): Unauthorized users cannot modify category data.
     * @principle Allows public read access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /products collection.
     * @path /databases/{database}/documents/products/{productId}
     * @allow (get, list): Any user can read product data.
     * @allow (create, update, delete): Only authorized users can modify product data.
     * @deny (create, update, delete): Unauthorized users cannot modify product data.
     * @principle Allows public read access to products.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users collection.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create): Allows a user to create their own profile.
     * @allow (get, update, delete): Only the user can access and modify their profile.
     * @deny (list): User listing is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow list: if false;
    }

    /**
     * @description Rules for the /users/{userId}/shopping_cart_items collection.
     * @path /databases/{database}/documents/users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (create, get, update, delete): Only the user can manage their own shopping cart items.
     * @deny (create, get, update, delete): Other users cannot access the shopping cart items.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders collection.
     * @path /databases/{database}/documents/users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete): Only the user can manage their own orders.
     * @deny (create, get, update, delete): Other users cannot access the orders.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId}/order_items collection.
     * @path /databases/{database}/documents/users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create, get, update, delete): Only the user can manage their own order items.
     * @deny (create, get, update, delete): Other users cannot access the order items.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/ai_outfit_suggestions collection.
     * @path /databases/{database}/documents/users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (create, get, update, delete): Only the user can manage their own AI outfit suggestions.
     * @deny (create, get, update, delete): Other users cannot access the AI outfit suggestions.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }
  }
}