/**
 * @fileoverview Firestore Security Rules for the Style Store application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (profiles, shopping carts, orders, AI suggestions). Top-level collections
 * (categories, products, site settings) have different access control
 * policies as described below.
 *
 * Data Structure:
 * - /categories/{categoryId}: Stores product categories (public read).
 * - /products/{productId}: Stores product information (public read).
 * - /users/{userId}: Stores user profile data (owner-only access).
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Shopping cart items
 *   (owner-only access).
 * - /users/{userId}/orders/{orderId}: Orders placed by a user (owner-only access).
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Items within an
 *   order (owner-only access).
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: AI outfit suggestions
 *   (owner-only access).
 * - /site_settings/{settingId}: Global site settings (currently open, but should
 *   be restricted to admins).
 *
 * Key Security Decisions:
 * - User data is strictly segregated under /users/{userId} to enforce
 *   ownership.
 * - Listing of user profiles is disallowed.
 * - Site settings are currently open, but a TODO is added to restrict
 *   access to admins.
 *
 * Denormalization for Authorization:
 *  - User ownership is enforced via path-based rules (e.g.,
 *    /users/{userId}/...). The `userId` path segment is compared to
 *    `request.auth.uid` to ensure that only the owner can access the data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to categories.
     * @path /databases/{database}/documents/categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @deny (create, update, delete) No user can create, update, or delete categories through client requests.  These operations should be performed through the Firebase Console or a secure backend.
     * @principle Allows public read access to categories; restricts write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to products.
     * @path /databases/{database}/documents/products/{productId}
     * @allow (get, list) Any user can read product data.
     * @deny (create, update, delete) No user can create, update, or delete products through client requests.  These operations should be performed through the Firebase Console or a secure backend.
     * @principle Allows public read access to products; restricts write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces owner-only access to user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) Allows a user to create their own profile if the UID matches the document ID.
     * @allow (get, update, delete) Allows a user to read, update, or delete their own profile if the UID matches the document ID.
     * @deny (list)  Listing user documents is not allowed.
     * @deny (create) Rejects creating a user document if the UID does not match the document ID.
     * @deny (update, delete) Rejects updating or deleting a user document if the UID does not match the document ID, or if the document doesn't exist.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to shopping cart items.
     * @path /databases/{database}/documents/users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list, create, update, delete) Allows a user to manage their own shopping cart items.
     * @deny (create, update, delete) Rejects any write operation if the user is not the owner.
     * @principle Enforces document ownership for all operations on shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to orders.
     * @path /databases/{database}/documents/users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete) Allows a user to manage their own orders.
     * @deny (create, update, delete) Rejects any write operation if the user is not the owner.
     * @principle Enforces document ownership for all operations on orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to order items.
     * @path /databases/{database}/documents/users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (get, list, create, update, delete) Allows a user to manage their own order items.
     * @deny (create, update, delete) Rejects any write operation if the user is not the owner.
     * @principle Enforces document ownership for all operations on order items.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to AI outfit suggestions.
     * @path /databases/{database}/documents/users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list, create, update, delete) Allows a user to manage their own AI outfit suggestions.
     * @deny (create, update, delete) Rejects any write operation if the user is not the owner.
     * @principle Enforces document ownership for all operations on AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read and write access to site settings.
     * @path /databases/{database}/documents/site_settings/{settingId}
     * @allow (get, list) Any user can read site settings.
     * @allow (create, update, delete) Any user can create, update or delete site settings.
     * @principle Allows public read access to site settings; write access must be secured to administrators
     */
    match /site_settings/{settingId} {
       // TODO: Restrict access to admins only.
      allow get, list: if true;
      allow create, update, delete: if true;
    }
  }

  /**
   * @description Checks if the user is signed in.
   * @returns {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user is the owner of the resource.
   * @param {string} userId The user ID to compare against the request's authentication UID.
   * @returns {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of the resource and the resource exists.
   * @param {string} userId The user ID to compare against the request's authentication UID.
   * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}