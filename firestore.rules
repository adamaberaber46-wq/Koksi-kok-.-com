/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a hybrid security model for the Style Store application.
 *  It combines role-based access for administrative functions with user-ownership for personal data.
 *
 * Data Structure:
 * - /categories/{categoryId}: Stores product categories. Publicly readable, but only modifiable by admins.
 * - /products/{productId}: Stores product information. Publicly readable, but only modifiable by admins.
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Stores shopping cart items, accessible only to the user.
 * - /orders/{orderId}: Stores order information. Publicly readable, but only modifiable by admins.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: Stores AI outfit suggestions, accessible only to the user.
 * - /site_settings/{settingId}: Stores global site settings, only modifiable by admins.
 *
 * Key Security Decisions:
 * - Admin Role: An account with the email "adamaber50@gmail.com" is granted full admin privileges, bypassing all other security checks.
 * - User Ownership: Most user-specific data is protected by strict ownership checks based on the Firebase Auth UID.
 * - No User Listing: Listing all users is explicitly denied to protect user privacy.
 * - Site Settings: Global site settings are only manageable by admins.
 * - Denormalization: For simplicity, this ruleset avoids complex queries or `get()` calls by assuming necessary authorization data is present in the documents.
 *
 * WARNING: This ruleset is in prototyping mode and does not enforce strict data validation beyond authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants full admin access to the account with the email "adamaber50@gmail.com".
     * @principle Role-based Access Control.
     */
    function isAdmin() {
      return request.auth.token.email == "adamaber50@gmail.com";
    }

    /**
     * @description Checks if the user is signed in.
     * @returns True if the user is signed in, false otherwise.
     * @principle Verified Identity.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @returns True if the user ID matches the authenticated user's ID, false otherwise.
     * @principle Ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @returns True if the user is signed in, is the owner, and the resource exists, false otherwise.
     * @principle Ownership and Resource Existence.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read category information.
     * @allow (create, update, delete) - Admin user can create, update, or delete category information.
     * @deny (create, update, delete) - Non-admin user cannot create, update, or delete category information.
     * @principle Public Read, Admin-Only Write.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read product information.
     * @allow (create, update, delete) - Admin user can create, update, or delete product information.
     * @deny (create, update, delete) - Non-admin user cannot create, update, or delete product information.
     * @principle Public Read, Admin-Only Write.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow create - A user can create their own profile if the user ID matches the authenticated user ID.
     * @allow get, update, delete - A user can only get, update, or delete their own profile.
     * @deny list - Listing all users is not allowed.
     * @deny create - A user cannot create a profile with a different user ID.
     * @deny update, delete - A user cannot update or delete another user's profile.
     * @principle Ownership.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rules for the /users/{userId}/shopping_cart_items/{cartItemId} collection.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow get, list, create, update, delete - A user can only manage their own shopping cart items.
     * @deny create, update - Shopping cart item ID must match the document ID.
     * @deny update, delete - A user cannot manage another user's shopping cart items.
     * @principle Ownership.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list, create, update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /orders/{orderId} collection.
     * @path /orders/{orderId}
     * @allow get, list - Any user can read order information.
     * @allow create, update, delete - Admin user can create, update, or delete order information.
     * @deny create, update, delete - Non-admin user cannot create, update, or delete order information.
     * @principle Public Read, Admin-Only Write.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/ai_outfit_suggestions/{suggestionId} collection.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow get, list, create, update, delete - A user can only manage their own AI outfit suggestions.
     * @deny create, update - AI outfit suggestion ID must match the document ID.
     * @deny update, delete - A user cannot manage another user's AI outfit suggestions.
     * @principle Ownership.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list, create, update, delete: if isExistingOwner(userId);
    }

     /**
      * @description Rules for the /site_settings/{settingId} collection.
      * @path /site_settings/{settingId}
      * @allow get, list: if true;
      * @allow create, update, delete: if isAdmin();
      * @deny create, update, delete: if !isAdmin();
      * @principle Admin Only.
      */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}