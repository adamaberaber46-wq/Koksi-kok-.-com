/**
 * @fileoverview Firestore Security Rules for Style Store App
 *
 * Core Philosophy:
 * This ruleset enforces a mix of public read access for product catalogs and
 * strict user-ownership for personal data like shopping carts and AI outfit suggestions.
 * Top-level collections like 'products' and 'categories' are publicly readable,
 * while user-specific subcollections under `/users/{userId}` are strictly controlled
 * by the corresponding user.  Orders are stored in a top-level collection.
 *
 * Data Structure:
 * - /categories/{categoryId}: Stores product categories (publicly readable).
 * - /products/{productId}: Stores product information (publicly readable).
 * - /users/{userId}: Stores user profile data. Document ID is the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Stores shopping cart items for a user.
 * - /orders/{orderId}: Stores order information (owner-only write).
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: Stores AI outfit suggestions for a user.
 * - /site_settings/{settingId}: Stores global site settings (unsecured in this prototype).
 *
 * Key Security Decisions:
 * - Public read access is granted for 'products' and 'categories' collections.
 * - User listing is implicitly denied (no rule enables it).
 * - User-specific data is secured using the `isOwner(userId)` helper function.
 * - Orders are stored in a top-level collection, so the rules only require authentication.
 * - Site settings are unsecured in this prototype, but should later be secured for admins only.
 *
 * Denormalization for Authorization:
 *  N/A - the prototype does not require denormalization
 *
 * Structural Segregation:
 *  The application uses separate collections for public (products, categories) and private (user-specific) data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No one can create, update, or delete categories.
     * @principle Grants public read access to product category information.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product information.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product data.
     * @deny (create, update, delete): No one can create, update, or delete products.
     * @principle Grants public read access to product information.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own profile.
     * @path /users/{userId}
     * @allow (create): A user can create their profile if the userId matches their auth UID.
     * @allow (get, list, update, delete): A user can read, update, and delete their own profile.
     * @deny (create): A user cannot create a profile with a userId that doesn't match their auth UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own shopping cart items.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list, create, update, delete): A user can manage items in their own shopping cart.
     * @deny (create): A user cannot create shopping cart items for another user.
     * @principle Restricts access to a user's own shopping cart data.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to create order documents.
     * @path /orders/{orderId}
     * @allow (create): Allows an authenticated user to create a new order.
     * @deny (update, delete): No one is allowed to update/delete an order.
     * @principle Authenticated user can create order.
     */
    match /orders/{orderId} {
        allow get, list: if false;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own AI outfit suggestions.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list, create, update, delete): A user can manage their own AI outfit suggestions.
     * @deny (create): A user cannot create AI outfit suggestions for another user.
     * @principle Restricts access to a user's own AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to site settings.
     * @path /site_settings/{settingId}
     * @allow (get, list): Any user can read site settings.
     * @deny (create, update, delete): No one can create, update, or delete site settings.
     * @principle Grants public read access to site settings.
     */
    match /site_settings/{settingId} {
      allow get, list: if true; // TODO: Secure this later for admin access only.
      allow create, update, delete: if false; // TODO: Secure this later for admin access only.
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

        /**
         * @description Checks if the user is the owner of an *existing* document.
         * @param {string} userId The user ID to check against.
         * @return {boolean} True if the user is the owner and the document exists, false otherwise.
         */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}