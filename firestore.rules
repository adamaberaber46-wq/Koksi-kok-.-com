/**
 * @fileoverview Firestore Security Rules for Style Store App
 *
 * Core Philosophy:
 * This ruleset enforces a mix of public read access for product catalogs and
 * strict user-ownership for personal data like shopping carts and AI outfit suggestions.
 * Orders are a top-level collection, implying administrative oversight, but
 * write access is currently not secured beyond requiring a logged-in user.
 *
 * Data Structure:
 * - /categories/{categoryId}: Public product categories.
 * - /products/{productId}: Public product information.
 * - /users/{userId}: User profiles, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Shopping cart items owned by the user.
 * - /orders/{orderId}: All orders placed in the store (potentially admin-managed).
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: AI outfit suggestions for a user.
 * - /site_settings/{settingId}: Global site settings, like the hero section content.
 *
 * Key Security Decisions:
 * - Public read access for categories and products.
 * - Strict owner-only access for user profiles, shopping cart items, and AI outfit suggestions.
 * - Open write access to the orders collection is NOT allowed, and needs to be secured. The error indicates that anyone can update orders, leading to a permission error.
 * - Site settings are publicly readable but writes are not currently secured.
 * - User listing is disallowed; only individual user profiles can be read.
 *
 * Denormalization for Authorization:
 * The current data structure effectively denormalizes the user ID into the paths
 * for shopping cart items and AI outfit suggestions. This enables simple `isOwner()` checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @deny (create, update, delete): No user can create, update, or delete categories through the client.
     * @principle: Provides public access to category data for browsing.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product information.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): No user can create, update, or delete products through the client.
     * @principle: Provides public access to product data for browsing.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profiles, enforcing ownership.
     * @path /users/{userId}
     * @allow (get): Only the user can read their own profile.
     * @allow (create): A user can create their own profile (self-registration).
     * @allow (update): Only the user can update their own profile. Enforces immutability of the ID.
     * @allow (delete): Only the user can delete their own profile.
     * @deny (list): Prevents listing all user profiles.
     * @deny: Other users cannot create, update, or delete this profile.
     * @principle: Enforces strict ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages shopping cart items for a user, enforcing ownership.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list): Only the owner can read/list their cart items.
     * @allow (create): Only the owner can create cart items. Validates userId matches path.
     * @allow (update): Only the owner can update cart items.
     * @allow (delete): Only the owner can delete cart items.
     * @deny: Other users cannot create, read, update, or delete this item.
     * @principle: Enforces strict ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages orders placed in the store.
     * @path /orders/{orderId}
     * @allow (get, list): Any authenticated user can read/list orders (for now). Consider restricting in production.
     * @allow (create): Any authenticated user can create orders.
     * @deny (update, delete): Only allow updates and deletes under specific conditions (e.g., admin role).
     * @principle: Currently allows open read and create access for orders. Requires further access control based on roles or order status.
     */
    match /orders/{orderId} {
        // CRITICAL: The original error was a permission denied on an update.
        // This requires addressing.  The update and delete need to be secured.
        // Placeholder allows have been removed below.
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if false; // TODO: secure updates based on user roles or order status.
        allow delete: if false; // TODO: secure deletes based on user roles or order status.
    }

    /**
     * @description Manages AI outfit suggestions for a user, enforcing ownership.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list): Only the owner can read/list their AI outfit suggestions.
     * @allow (create): Only the owner can create AI outfit suggestions. Validates userId matches path.
     * @allow (update): Only the owner can update AI outfit suggestions.
     * @allow (delete): Only the owner can delete AI outfit suggestions.
     * @deny: Other users cannot create, read, update, or delete this suggestion.
     * @principle: Enforces strict ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages global site settings (e.g., hero section content).
     * @path /site_settings/{settingId}
     * @allow (get, list): Allows public read access to site settings.
     * @deny (create, update, delete): No user can create, update, or delete site settings through the client.
     * @principle: Provides public access to site settings, but restricts write access.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // --- Helper Functions ---

  /**
   * @description Checks if the user is signed in.
   * @return {bool} True if the user is authenticated, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the authenticated user's UID matches the provided userId.
   * @param {string} userId The user ID to compare against the authenticated user's UID.
   * @return {bool} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  /**
   * @description Checks if the authenticated user is the owner of an existing document.
   * @param {string} userId The user ID to compare against the authenticated user's UID.
   * @return {bool} True if the user is the owner and the document exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}