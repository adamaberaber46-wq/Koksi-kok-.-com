/**
 * @file Firestore Security Rules for Style Store Application
 * @description This ruleset enforces a user-ownership model for user-specific data and allows public read access to product catalogs.
 *
 * Data Structure:
 * - /categories/{categoryId}: Stores product categories; publicly readable.
 * - /products/{productId}: Stores product information; publicly readable.
 * - /users/{userId}: Stores user profile data; only accessible by the user themselves.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Stores shopping cart items; only accessible by the user.
 * - /users/{userId}/orders/{orderId}: Stores order history; only accessible by the user.
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Stores items within a specific order; only accessible by the user.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: Stores AI outfit suggestions; only accessible by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read-only collections (categories, products) are publicly readable.
 * - Strict ownership is enforced for all user-related data using path-based authorization.
 * - The admin can delete any product.
 *
 * Denormalization for Authorization:
 * - User-specific data is nested under /users/{userId} to enable path-based authorization.
 *
 * Structural Segregation:
 * - Public data (products, categories) is stored in top-level collections, while private user data is stored under user-specific subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @deny (create, update, delete): No user can modify category information.
     * @principle Publicly readable data with no write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product information and allows the admin to delete products.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @allow (delete): The admin can delete product information.
     * @deny (create, update): No user can create or update product information.
     * @principle Publicly readable data with admin controlled delete access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can access their profile.
     * @path /users/{userId}
     * @allow (create): A user can create their own profile (if user id is correct).
     * @allow (get, update, delete): A user can get, update, and delete their own profile.
     * @deny (list): User listing is not allowed.
     * @deny (create): A user cannot create a profile with a different user ID.
     * @deny (get, update, delete): A user cannot get, update or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Enforces user-ownership for shopping cart items. Only the authenticated user can access their shopping cart.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (create, get, update, delete, list): A user can manage their own shopping cart items.
     * @deny (create, get, update, delete, list): A user cannot manage another user's shopping cart items.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for orders. Only the authenticated user can access their orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete, list): A user can manage their own orders.
     * @deny (create, get, update, delete, list): A user cannot manage another user's orders.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for order items. Only the authenticated user can access order items within their orders.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create, get, update, delete, list): A user can manage their own order items.
     * @deny (create, get, update, delete, list): A user cannot manage another user's order items.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for AI outfit suggestions. Only the authenticated user can access their outfit suggestions.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (create, get, update, delete, list): A user can manage their own AI outfit suggestions.
     * @deny (create, get, update, delete, list): A user cannot manage another user's AI outfit suggestions.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    //------------------ Helper functions -----------------------

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user IDs match and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
        /**
         * @description Checks if the user is an admin.
         * @return {bool} True if the user is an admin, false otherwise.
         */
        function isAdmin() {
            // TODO: Replace with your actual admin check logic (e.g., custom claim).
            return isSignedIn() && request.auth.token.email == "admin@example.com";
        }
  }
}