/**
 * @fileOverview Firestore Security Rules for the Style Store application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (profiles, shopping carts, orders, AI suggestions) while allowing public read access to product catalogs. Write access is restricted to authenticated users, and ownership is validated through path-based checks and internal document fields. Data structure immutability is enforced for key user-identifying information.
 *
 * Data Structure:
 * - /categories/{categoryId}: Public product categories.
 * - /products/{productId}: Public product information.
 * - /users/{userId}: User profiles, where {userId} matches the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Shopping cart items for a specific user.
 * - /users/{userId}/orders/{orderId}: Orders placed by a specific user.
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Items within a specific order.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: AI outfit suggestions for a specific user.
 *
 * Key Security Decisions:
 * - Public read access to product catalogs (categories and products).
 * - Strict ownership model for user profiles and related data, preventing cross-user access.
 * - Immutability of user IDs within documents to prevent unauthorized data reassignment.
 * - Denial of listing operations for user profiles to prevent enumeration.
 *
 * Denormalization for Authorization:
 * The data structure uses path-based authorization for user-specific data. The `userId` is embedded in the path, allowing rules to directly compare it with `request.auth.uid` without additional reads. For instance, `/users/{userId}/shopping_cart_items/{cartItemId}` enforces that only the user with the matching `userId` can access their shopping cart items.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product categories.
     * @path /databases/{database}/documents/categories/{categoryId}
     * @allow (get, list) Authenticated or unauthenticated user can read any category.
     * @deny (create, update, delete) No user can create, update, or delete categories through the client; data is managed via other secured admin processes.
     * @principle Public read access for product catalog.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product information.
     * @path /databases/{database}/documents/products/{productId}
     * @allow (get, list) Authenticated or unauthenticated user can read any product.
     * @deny (create, update, delete) No user can create, update, or delete products through the client; data is managed via other secured admin processes.
     * @principle Public read access for product catalog.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profile data, ensuring ownership and immutability.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User can create their profile if the userId matches their auth UID.
     * @allow (get, update, delete) User can access and modify their profile if the userId matches their auth UID. The userId claim within the document is immutable.
     * @deny (list) Listing user profiles is not permitted.
     * @deny Any operation if the user is not authenticated.
     * @deny (create) if the user id does not match the user auth id.
     * @deny (update) If the `id` field is changed
     * @principle Enforces document ownership and prevents unauthorized profile access. Validates relational integrity by ensuring the document ID matches the user ID.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages shopping cart items for a user.
     * @path /databases/{database}/documents/users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list, create, update, delete) User can manage their shopping cart items if the userId matches their auth UID.
     * @deny Any operation if the user is not authenticated or the userId does not match the auth UID.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages orders placed by a user.
     * @path /databases/{database}/documents/users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete) User can manage their orders if the userId matches their auth UID.
     * @deny Any operation if the user is not authenticated or the userId does not match the auth UID.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages items within a specific order.
     * @path /databases/{database}/documents/users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (get, list, create, update, delete) User can manage order items within their orders if the userId matches their auth UID.
     * @deny Any operation if the user is not authenticated or the userId does not match the auth UID.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages AI outfit suggestions for a user.
     * @path /databases/{database}/documents/users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list, create, update, delete) User can manage their AI outfit suggestions if the userId matches their auth UID.
     * @deny Any operation if the user is not authenticated or the userId does not match the auth UID.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  //Helper function to check existing document and ownership
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}