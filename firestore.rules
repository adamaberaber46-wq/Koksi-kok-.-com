/**
 * @fileoverview Firestore Security Rules for Style Store App
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for product catalogs and strict user-ownership for personal data and AI-generated content.  Administrative access to modify products or settings is NOT supported in this prototype.
 *
 * Data Structure:
 * - Products and categories are stored in top-level collections for public read access.
 * - User-specific data (profiles, shopping carts, AI suggestions) are nested under /users/{userId}.
 * - Orders are stored in a top-level collection.
 * - Global site settings are stored in a `site_settings` collection.
 *
 * Key Security Decisions:
 * - Products and Categories: Public read access (get, list) for all.  Write access is denied to all (no admin role defined in this prototype).
 * - User Profiles: Only the authenticated user can read/write their own profile.
 * - Shopping Carts and AI Suggestions: Only the authenticated user can read/write data nested under their own profile.
 * - Orders: Orders can be created by any authenticated user, and admins (not implemented here) would manage them. Since there is no admin role here, only signed in user can create order.
 * - Site Settings: No write access granted (admin role is not implemented in this prototype)
 * - Denormalization: No denormalization is used, as the app requirements are simple and ownership can be determined directly from the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to product categories.  Write access is denied.
     * @path /databases/{database}/documents/categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No user can create, update, or delete categories (admin role not implemented).
     * @principle Allows public reads for categories, denies all writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to products. Write access is denied.
     * @path /databases/{database}/documents/products/{productId}
     * @allow (get, list): Any user can read product data.
     * @deny (create, update, delete): No user can create, update, or delete products (admin role not implemented).
     * @principle Allows public reads for products, denies all writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get): Only the owner (authenticated user with matching UID) can read their profile.
     * @allow (create): Only the owner (authenticated user with matching UID) can create their profile.
     * @allow (update): Only the owner (authenticated user with matching UID) can update their profile.
     * @allow (delete): Only the owner (authenticated user with matching UID) can delete their profile.
     * @deny (get): Any user can attempt to read non existing profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for shopping cart items.
     * @path /databases/{database}/documents/users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list): Only the owner (authenticated user with matching UID) can read their cart items.
     * @allow (create, update, delete): Only the owner (authenticated user with matching UID) can create, update, or delete their cart items.
     * @deny (create, update, delete): Attempts by other users to modify cart items will be rejected.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to create an order. No authorization to update or delete order in this prototype.
     * @path /databases/{database}/documents/orders/{orderId}
     * @allow (create): Any signed-in user can create an order.
     * @deny (update, delete): No unauthenticated user can update or delete an order.
     * @principle Allows order creation for signed-in users, restricts modifications.
     */
    match /orders/{orderId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for AI outfit suggestions.
     * @path /databases/{database}/documents/users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list): Only the owner (authenticated user with matching UID) can read their outfit suggestions.
     * @allow (create, update, delete): Only the owner (authenticated user with matching UID) can create, update, or delete their outfit suggestions.
     * @deny (create, update, delete): Attempts by other users to modify outfit suggestions will be rejected.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants read access to site settings, but denies all writes (admin role not implemented).
     * @path /databases/{database}/documents/site_settings/{settingId}
     * @allow (get, list): Any user can read site settings.
     * @deny (create, update, delete): No user can create, update, or delete site settings (admin role not implemented).
     * @principle Allows public reads for site settings, denies all writes.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}