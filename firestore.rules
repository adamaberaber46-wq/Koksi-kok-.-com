/**
 * @fileoverview Firestore Security Rules for the Style Store application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric access model for user-specific data while allowing open read access to public content.
 *
 * Data Structure:
 * - User profiles and associated data (shopping carts, AI outfit suggestions) are nested under `/users/{userId}`.
 * - Products, categories, orders, and site settings are stored in top-level collections.
 *
 * Key Security Decisions:
 * - Orders can be read and written by anyone for now.
 * - User listing is disallowed to prevent data harvesting.
 * - Read-only collections like 'categories' and 'products' are publicly accessible.
 *
 * Denormalization for Authorization:
 *  None.
 *
 * Structural Segregation:
 *  Private user data is stored under the `/users/{userId}` collection, while public data is in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the 'categories' collection.
     * @path /databases/{database}/documents/categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @deny (create, update, delete): No user can create, update, or delete categories through the client.
     * @principle Public read access, admin-only writes (backend managed).
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the 'products' collection.
     * @path /databases/{database}/documents/products/{productId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): No user can create, update, or delete products through the client.
     * @principle Public read access, admin-only writes (backend managed).
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the 'users' collection.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create): A user can create their own profile using their UID as the document ID.
     * @allow (get, update, delete): A user can read, update, and delete their own profile.
     * @deny (list): Listing all users is not allowed.
     * @deny (create): A user cannot create a profile with an ID that doesn't match their UID.
     * @principle Enforces user-ownership; only the user can manage their own profile.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow list: if false;
    }

    /**
     * @description Rules for the 'shopping_cart_items' subcollection under a user.
     * @path /databases/{database}/documents/users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list, create, update, delete): A user can manage their own shopping cart items.
     * @deny (create, update): A user cannot create or update items with a userId that doesn't match their UID.
     * @principle Enforces user-ownership; only the user can manage their own shopping cart.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Rules for the 'orders' collection.
     * @path /databases/{database}/documents/orders/{orderId}
     * @allow (get, list): Any user can read any order.
     * @allow (create, update, delete): Any user can create, update and delete any order.
     */
    match /orders/{orderId} {
        allow get, list: if true;
        allow create, update, delete: if true; // TODO: Add security, maybe using a roles-based approach to allow only admins to make changes
    }

    /**
     * @description Rules for the 'ai_outfit_suggestions' subcollection under a user.
     * @path /databases/{database}/documents/users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list, create, update, delete): A user can manage their own AI outfit suggestions.
     * @deny (create, update): A user cannot create or update suggestions with a userId that doesn't match their UID.
     * @principle Enforces user-ownership; only the user can manage their own suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Rules for the 'site_settings' collection.
     * @path /databases/{database}/documents/site_settings/{settingId}
     * @allow (get, list): Any user can read site settings.
     * @deny (create, update, delete): No user can create, update, or delete site settings through the client.
     * @principle Public read access, admin-only writes (backend managed).
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}