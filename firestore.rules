/**
 * @fileoverview Firestore Security Rules for Style Store App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (profiles, shopping carts, AI outfit suggestions), while allowing public
 * read access to product and category information. Orders are stored in a top-level
 * collection with open access in this prototyping phase, but should be secured
 * in a production environment.  Site settings are publicly readable.
 *
 * Data Structure:
 * - /categories/{categoryId}: Stores product categories (publicly readable).
 * - /products/{productId}: Stores product information (publicly readable).
 * - /users/{userId}: Stores user profile data (owner-only access). Document ID is the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Stores shopping cart items (owner-only access).
 * - /orders/{orderId}: Stores order information (open access in prototyping, needs security review).
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: Stores AI outfit suggestions (owner-only access).
 * - /site_settings/{settingId}: Stores site-wide settings (publicly readable).
 * - /roles/{userId}: Stores user roles (owner-only access). Document ID is the Firebase Auth UID.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for the /users collection to prevent unauthorized access to user data.
 * - Ambiguous relationships default to strict owner-only access.
 * - Orders are currently open for prototyping, but this is a security risk and MUST be addressed in a production environment.
 *
 * Denormalization for Authorization:
 *   - User-specific data (shopping carts, profiles, AI outfit suggestions) is nested under the user's
 *     document to simplify authorization checks using the `isOwner(userId)` function.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the resource's userId, and that the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /categories collection.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @deny (create, update, delete) No user can create, update, or delete category data.
     * @principle Public read access for product categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /products collection.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product data.
     * @deny (create, update, delete) No user can create, update, or delete product data.
     * @principle Public read access for product information.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile if the UID matches.
     * @allow (get, update, delete) Only the user can access/modify their own profile.
     * @deny   (list)  Listing users is not allowed.
     * @deny (create) A user cannot create a profile with a different UID.
     * @deny (update, delete)  A user cannot modify other users' profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/shopping_cart_items collection.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list, create, update, delete) Only the user can access their own shopping cart items.
     * @deny (create) A user cannot create shopping cart items for a different user.
     * @deny (update, delete)  A user cannot modify other users' shopping cart items.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /orders collection.
     * @path /orders/{orderId}
     * @allow (get, list, create, update, delete) Any user can read/write all order information.
     * @principle Open access for orders (FOR PROTOTYPING ONLY - SECURITY RISK).
     */
    match /orders/{orderId} {
      allow get, list, create, update, delete: if true;  // TODO: Secure this collection in production.
    }

    /**
     * @description Rules for the /users/{userId}/ai_outfit_suggestions collection.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list, create, update, delete) Only the user can access their own AI outfit suggestions.
     * @deny (create) A user cannot create AI outfit suggestions for a different user.
     * @deny (update, delete)  A user cannot modify other users' AI outfit suggestions.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /site_settings collection.
     * @path /site_settings/{settingId}
     * @allow (get, list) Any user can read site settings.
     * @deny (create, update, delete) No user can create, update, or delete site settings.
     * @principle Public read access for site settings.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
   /**
     * @description Rules for the /roles collection.
     * @path /roles/{userId}
     * @allow (get) Only the user can get their own role.
     * @allow (create) A user can create their own role if the UID matches.
     * @allow (update) Only the user can update their own role.
     * @allow (delete) Only the user can delete their own role.
     * @deny (list) Listing user roles is not allowed.
     * @deny (create) A user cannot create a role for a different user.
     * @deny (update, delete) A user cannot modify other users' roles.
     * @principle Enforces document ownership for user roles.
     */
    match /roles/{userId} {
       allow get: if isOwner(userId);
       allow list: if false;
       allow create: if isOwner(userId) && request.resource.data.id == userId;
       allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
       allow delete: if isExistingOwner(userId);
    }
  }
}