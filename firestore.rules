/**
 * @fileoverview Firestore Security Rules for Style Store.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for product catalogs and
 * strict user-ownership for personal data like user profiles, shopping carts, and AI outfit suggestions.
 * Orders are writeable by authenticated users, with the `userId` field in the `Order`
 * document matching the authenticated user's UID.
 *
 * Data Structure:
 * - /categories/{categoryId}: Public product categories.
 * - /products/{productId}: Public product information.
 * - /users/{userId}: User profiles, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Shopping cart items owned by the user.
 * - /orders/{orderId}: Orders placed by users.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: AI outfit suggestions for a user.
 * - /site_settings/{settingId}: Global site settings (e.g., hero section content).
 *
 * Key Security Decisions:
 * - Public read access for product catalogs (categories, products).
 * - Strict user-ownership for user profiles, shopping carts, and AI outfit suggestions.
 * - Orders are writeable by authenticated users if the userId matches.
 * - Site settings are only readable.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * The Order document requires a `userId` field that matches the authenticated user's UID for write operations.
 *
 * Structural Segregation:
 * User-specific data is stored under the /users/{userId} path to provide clear ownership and prevent unauthorized access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read category information.
     * @path /categories/{categoryId}
     * @allow get, list: Anyone can read category data.
     * @deny create, update, delete: No one can create, update, or delete categories through the client.
     * @principle Public read access for product catalog.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read product information.
     * @path /products/{productId}
     * @allow get, list: Anyone can read product data.
     * @deny create, update, delete: No one can create, update, or delete products through the client.
     * @principle Public read access for product catalog.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profile data, enforcing strict user ownership.
     * @path /users/{userId}
     * @allow get: if isOwner(userId); Allows a user to read their own profile.
     * @allow create: if isOwner(userId); Allows a user to create their own profile.
     * @allow update: if isExistingOwner(userId); Allows a user to update their own profile, only if the profile already exists.
     * @allow delete: if isExistingOwner(userId); Allows a user to delete their own profile, only if the profile already exists.
     * @allow list: if false;  Listing all users is forbidden.
     * @deny create: if request.resource.data.id != userId; The created document's ID must match the authenticated user's ID.
     * @deny update: if request.resource.data.id != resource.data.id; The `id` field (intended as immutable) cannot be changed.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && (request.resource.data.id == userId);
      allow update: if isExistingOwner(userId) && (request.resource.data.id == resource.data.id);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages shopping cart items for a user, enforcing strict user ownership.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow get: if isOwner(userId); Allows a user to read their own cart items.
     * @allow create: if isOwner(userId); Allows a user to create items in their own cart.
     * @allow update: if isExistingOwner(userId); Allows a user to update items in their own cart, only if the cart item already exists.
     * @allow delete: if isExistingOwner(userId); Allows a user to delete items from their own cart, only if the cart item already exists.
     * @allow list: if isOwner(userId); Allows a user to list their own cart items.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to create orders, with the userId matching the authenticated user's UID.
     * @path /orders/{orderId}
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid; Allows creating an order if the user is signed in and the userId matches.
     * @allow get: if true; // TODO:  Fine-grained authorization (e.g., order history for users, admin access).
     * @allow list: if true; // TODO:  Fine-grained authorization (e.g., order history for users, admin access).
     * @allow update, delete: if false; // TODO: Add owner validation or admin roles if required.
     * @principle Authenticated users can create orders.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // TODO: Add owner validation or admin roles if required.
    }

    /**
     * @description Manages AI outfit suggestions for a user, enforcing strict user ownership.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow get: if isOwner(userId); Allows a user to read their own AI outfit suggestions.
     * @allow create: if isOwner(userId); Allows a user to create AI outfit suggestions for themselves.
     * @allow update: if isExistingOwner(userId); Allows a user to update their own AI outfit suggestions, only if the outfit suggestion already exists.
     * @allow delete: if isExistingOwner(userId); Allows a user to delete their own AI outfit suggestions, only if the outfit suggestion already exists.
     * @allow list: if isOwner(userId); Allows a user to list their own AI outfit suggestions.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read site settings.
     * @path /site_settings/{settingId}
     * @allow get, list: Anyone can read site settings.
     * @deny create, update, delete: No one can create, update, or delete site settings through the client.
     * @principle Public read access for site settings.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the request is made by the owner.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     *              This function is intended to be used only for destructive operations, such as updates and deletes.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the request is made by the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}