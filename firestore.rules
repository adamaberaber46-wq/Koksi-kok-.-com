/**
 * @fileoverview Firestore Security Rules for the Style Store application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (shopping carts, orders, AI suggestions) and allows public read access to product and category information. Write access is restricted to authenticated users with proper ownership.
 *
 * Data Structure:
 * - `/categories/{categoryId}`: Stores product categories. Publicly readable.
 * - `/products/{productId}`: Stores product information. Publicly readable.
 * - `/users/{userId}`: Stores user profile data.  Document ID is the Firebase Auth UID. Owner-only access.
 * - `/users/{userId}/shopping_cart_items/{cartItemId}`: Stores shopping cart items. Owner-only access.
 * - `/users/{userId}/orders/{orderId}`: Stores order history. Owner-only access.
 * - `/users/{userId}/orders/{orderId}/order_items/{orderItemId}`: Stores items within a specific order. Owner-only access.
 * - `/users/{userId}/ai_outfit_suggestions/{suggestionId}`: Stores AI outfit suggestions. Owner-only access.
 *
 * Key Security Decisions:
 * - Public read access to categories and products to allow browsing without authentication.
 * - Strict owner-only access to user profiles, shopping carts, orders, and AI outfit suggestions.
 * - Listing of user-owned subcollections (shopping carts, orders, AI outfit suggestions) is allowed only to the owner.
 * - No data shape validation is performed in this prototyping phase, except for critical ownership checks.
 *
 * Denormalization for Authorization:
 * - User-specific data is nested under `/users/{userId}` to allow direct comparison with `request.auth.uid` without additional reads.
 *
 * Structural Segregation:
 * - Public product and category data are stored in top-level collections, separate from private user data, to facilitate secure and efficient listing operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read category information.
     * @path /databases/{database}/documents/categories/{categoryId}
     * @allow (get, list) User can read a category.
     * @deny (create, update, delete) No one can create, update, or delete categories via the client.
     * @principle Public read access for product catalog.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read product information.
     * @path /databases/{database}/documents/products/{productId}
     * @allow (get, list) User can read a product.
     * @deny (create, update, delete) No one can create, update, or delete products via the client.
     * @principle Public read access for product catalog.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profile access.  Only the user can read, update, or delete their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) User can only access their own profile.
     * @deny (create) User cannot create a profile with a different userId.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Manages shopping cart items for a specific user.  Only the user can manage their own cart items.
     * @path /databases/{database}/documents/users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (create, get, update, delete, list) User can only access their own shopping cart items.
     * @deny (create, get, update, delete, list) User cannot access another user's shopping cart items.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Manages orders for a specific user.  Only the user can manage their own orders.
     * @path /databases/{database}/documents/users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete, list) User can only access their own orders.
     * @deny (create, get, update, delete, list) User cannot access another user's orders.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Manages order items within a specific order for a specific user.  Only the user can manage their own order items.
     * @path /databases/{database}/documents/users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create, get, update, delete, list) User can only access their own order items.
     * @deny (create, get, update, delete, list) User cannot access another user's order items.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Manages AI outfit suggestions for a specific user.  Only the user can manage their own outfit suggestions.
     * @path /databases/{database}/documents/users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (create, get, update, delete, list) User can only access their own AI outfit suggestions.
     * @deny (create, get, update, delete, list) User cannot access another user's AI outfit suggestions.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }
  }
}