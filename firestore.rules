/**
 * @file Firebase Security Rules for the Style Store application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data
 * (profiles, carts, orders, AI suggestions), while allowing public read access
 * to product catalogs and categories. Global site settings are read-only for all users.
 *
 * Data Structure:
 * - /categories/{categoryId}: Public product categories.
 * - /products/{productId}: Public product information.
 * - /users/{userId}: User profiles, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Shopping cart items owned by the user.
 * - /users/{userId}/orders/{orderId}: Orders placed by the user.
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Items within a specific order.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: AI outfit suggestions for the user.
 * - /site_settings/{settingId}: Global site settings (e.g., homepage hero section).
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Site settings are publicly readable but not writable via the client.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *  - User-specific data is stored under the `/users/{userId}` path. This allows security rules to directly check the `request.auth.uid` against the `userId` path parameter, without needing to read parent documents.
 *
 * Structural Segregation:
 *  - User-specific data (shopping carts, orders, AI outfit suggestions) is stored under the `/users/{userId}` path.
 *  - This allows security rules to directly check the `request.auth.uid` against the `userId` path parameter, without needing to read parent documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /categories collection.
     * @path /databases/{database}/documents/categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No user can create, update, or delete categories via client SDK.
     * @principle Public read, admin-only write (backend only).
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /products collection.
     * @path /databases/{database}/documents/products/{productId}
     * @allow (get, list): Any user can read product data.
     * @deny (create, update, delete): No user can create, update, or delete products via client SDK.
     * @principle Public read, admin-only write (backend only).
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users collection.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create): A user can create their own profile.
     * @allow (get, update, delete): A user can read, update, and delete their own profile.
     * @deny (list): User listing is not allowed.
     * @deny (create): A user cannot create a profile for another user.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow list: if false;
    }

    /**
     * @description Rules for the /users/{userId}/shopping_cart_items collection.
     * @path /databases/{database}/documents/users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (create, get, list, update, delete): A user can manage their own shopping cart items.
     * @deny: A user cannot manage another user's shopping cart items.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list, create, update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders collection.
     * @path /databases/{database}/documents/users/{userId}/orders/{orderId}
     * @allow (create, get, list, update, delete): A user can manage their own orders.
     * @deny: A user cannot manage another user's orders.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list, create, update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders/{orderId}/order_items collection.
     * @path /databases/{database}/documents/users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create, get, list, update, delete): A user can manage their own order items.
     * @deny: A user cannot manage another user's order items.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get, list, create, update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/ai_outfit_suggestions collection.
     * @path /databases/{database}/documents/users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (create, get, list, update, delete): A user can manage their own AI outfit suggestions.
     * @deny: A user cannot manage another user's AI outfit suggestions.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list, create, update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /site_settings collection.
     * @path /databases/{database}/documents/site_settings/{settingId}
     * @allow (get): Any user can read site settings.
     * @deny (create, update, delete, list): No user can create, update, or delete site settings via client SDK. Listing is also disallowed.
     * @principle Public read, admin-only write (backend only).
     */
    match /site_settings/{settingId} {
      allow get: if true;
      allow list: if false;
      allow create, update, delete: if false;
    }
  }
}