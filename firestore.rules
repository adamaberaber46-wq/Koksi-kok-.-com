rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read categories. Only allows authorized users to create, update, and delete categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Anyone can read.
     * @deny (create, update, delete) No one can write without specific authorization logic. // TODO: Add authorization logic if needed.
     * @principle Public read access for product categories; restricted write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read products. Only allows authorized users to create, update, and delete products.
     * @path /products/{productId}
     * @allow (get, list) Anyone can read.
     * @deny (create, update, delete) No one can write without specific authorization logic. // TODO: Add authorization logic if needed.
     * @principle Public read access for product information; restricted write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages user profiles, ensuring users can only access their own profile.
     * @path /users/{userId}
     * @allow (create) User can create their own profile if the UID matches.
     * @allow (get, update, delete) User can only access their own profile.
     * @deny (list) Prevents listing all user profiles.
     * @deny (create) if the authenticated user id not match the user id in the request.
     * @principle Enforces document ownership for user profiles using path-based authorization.
     */
    match /users/{userId} {
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Manages shopping cart items for a user, ensuring only the owner can access them.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (create, get, list, update, delete) User can only access their own shopping cart items.
     * @deny (create, get, list, update, delete) if the authenticated user id not match the user id in the path.
     * @principle Enforces document ownership for shopping cart items using path-based authorization.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list, create, update, delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages orders for a user, ensuring only the owner can access them.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, list, update, delete) User can only access their own orders.
     * @deny (create, get, list, update, delete) if the authenticated user id not match the user id in the path.
     * @principle Enforces document ownership for orders using path-based authorization.
     */
    match /users/{userId}/orders/{orderId} {
      allow get, list, create, update, delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages order items within a specific order, ensuring only the owner can access them.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create, get, list, update, delete) User can only access their own order items.
     * @deny (create, get, list, update, delete) if the authenticated user id not match the user id in the path.
     * @principle Enforces document ownership for order items using path-based authorization.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get, list, create, update, delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages AI outfit suggestions for a user, ensuring only the owner can access them.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (create, get, list, update, delete) User can only access their own AI outfit suggestions.
     * @deny (create, get, list, update, delete) if the authenticated user id not match the user id in the path.
     * @principle Enforces document ownership for AI outfit suggestions using path-based authorization.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list, create, update, delete: if isSignedIn() && isOwner(userId);
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return request.auth.token.admin == true;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId);
  }
}