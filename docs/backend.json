{
  "entities": {
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product in the store's catalog.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the product."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "availableSizes": {
          "type": "array",
          "description": "Available sizes for the product.",
          "items": {
            "type": "string"
          }
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to Category. (Relationship: Category 1:N Product)"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "price",
        "imageUrl",
        "availableSizes",
        "categoryId"
      ]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a category of products.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "Name of the category."
        },
        "description": {
          "type": "string",
          "description": "Description of the category."
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ]
    },
    "ShoppingCartItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ShoppingCartItem",
      "type": "object",
      "description": "Represents an item in the shopping cart.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the shopping cart item."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N ShoppingCartItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N ShoppingCartItem)"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product in the cart."
        }
      },
      "required": [
        "id",
        "userId",
        "productId",
        "quantity"
      ]
    },
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "shippingAddress": {
          "type": "string",
          "description": "Shipping address of the user."
        },
        "billingAddress": {
          "type": "string",
          "description": "Billing address of the user."
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents a customer order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Order)"
        },
        "orderDate": {
          "type": "string",
          "description": "Date when the order was placed.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount of the order."
        },
        "shippingAddress": {
          "type": "string",
          "description": "Shipping address for the order."
        },
        "billingAddress": {
          "type": "string",
          "description": "Billing address for the order."
        },
        "orderItemIds": {
          "type": "array",
          "description": "References to OrderItems. (Relationship: Order 1:N OrderItem)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "orderDate",
        "totalAmount",
        "shippingAddress",
        "billingAddress",
        "orderItemIds"
      ]
    },
    "OrderItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OrderItem",
      "type": "object",
      "description": "Represents an item within an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order item."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N OrderItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N OrderItem)"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product in the order item."
        },
        "price": {
          "type": "number",
          "description": "Price of the product in the order item."
        }
      },
      "required": [
        "id",
        "orderId",
        "productId",
        "quantity",
        "price"
      ]
    },
    "AiOutfitSuggestion": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AiOutfitSuggestion",
      "type": "object",
      "description": "Represents an AI generated outfit suggestion.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AI outfit suggestion."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N AiOutfitSuggestion)"
        },
        "description": {
          "type": "string",
          "description": "Description of the outfit suggestion."
        },
        "productIds": {
          "type": "array",
          "description": "References to Products. (Relationship: AiOutfitSuggestion 1:N Product)",
          "items": {
            "type": "string"
          }
        },
        "dateCreated": {
          "type": "string",
          "description": "Date the AI outfit suggestion was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "description",
        "productIds",
        "dateCreated"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/backend/entities/Category"
          },
          "description": "Stores product categories.",
          "params": [
            {
              "name": "categoryId",
              "description": "Unique identifier for the category."
            }
          ]
        }
      },
      {
        "path": "products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information.",
          "params": [
            {
              "name": "productId",
              "description": "Unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile data. Document ID is the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/shopping_cart_items/{cartItemId}",
        "definition": {
          "entityName": "ShoppingCartItem",
          "schema": {
            "$ref": "#/backend/entities/ShoppingCartItem"
          },
          "description": "Stores shopping cart items for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            },
            {
              "name": "cartItemId",
              "description": "Unique identifier for the shopping cart item."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores orders placed by a user.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            },
            {
              "name": "orderId",
              "description": "Unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/orders/{orderId}/order_items/{orderItemId}",
        "definition": {
          "entityName": "OrderItem",
          "schema": {
            "$ref": "#/backend/entities/OrderItem"
          },
          "description": "Stores items within a specific order.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            },
            {
              "name": "orderId",
              "description": "Unique identifier for the order."
            },
            {
              "name": "orderItemId",
              "description": "Unique identifier for the order item."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/ai_outfit_suggestions/{suggestionId}",
        "definition": {
          "entityName": "AiOutfitSuggestion",
          "schema": {
            "$ref": "#/backend/entities/AiOutfitSuggestion"
          },
          "description": "Stores AI outfit suggestions for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            },
            {
              "name": "suggestionId",
              "description": "Unique identifier for the AI outfit suggestion."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the Style Store application's core features, including product catalog, shopping cart, user profiles, and AI outfit suggestions. It prioritizes authorization independence by using path-based ownership for user-specific data and denormalization where appropriate. The structure also supports secure listing and data integrity.\n\n*   **Categories and Products:** Categories are stored in a top-level `categories` collection. Products are also stored in a top-level `products` collection. This facilitates easy listing and filtering of categories and products.\n*   **User Profiles:** User profiles are stored in a `users` collection, with each document ID being the user's UID from Firebase Authentication. This path-based ownership ensures that only the authenticated user can access their profile data.\n*   **Shopping Carts:** Each user has their own shopping cart, which is stored as a subcollection under their user document (`/users/{userId}/shopping_cart_items/{cartItemId}`). This enforces ownership and prevents unauthorized access.\n*   **Orders:** Orders are stored in a subcollection under the user's document (`/users/{userId}/orders/{orderId}`). Similar to shopping carts, this ensures that only the user can access their order history.\n*   **AI Outfit Suggestions:** AI outfit suggestions are stored in a subcollection under the user's document (`/users/{userId}/ai_outfit_suggestions/{suggestionId}`). This allows users to manage their outfit suggestions and keeps the data private.\n\n**Authorization Independence:**\n\n*   User-specific data (shopping carts, orders, AI outfit suggestions) is stored under the `/users/{userId}` path. This allows security rules to directly check the `request.auth.uid` against the `userId` path parameter, without needing to read parent documents.\n\n**QAPs (Rules are not Filters):**\n\n*   The structural segregation of data based on ownership (e.g., `/users/{userId}/shopping_cart_items`) ensures that listing operations are secure and efficient. Rules can simply check if the requesting user ID matches the `userId` path parameter."
  }
}